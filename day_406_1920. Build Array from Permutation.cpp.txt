/*
1920. Build Array from Permutation
Solved
Easy
Topics
Companies
Hint
Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

 

Example 1:

Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]
Explanation: The array ans is built as follows: 
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]
    = [0,1,2,4,5,3]
Example 2:

Input: nums = [5,0,1,2,3,4]
Output: [4,5,0,1,2,3]
Explanation: The array ans is built as follows:
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
    = [4,5,0,1,2,3]
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] < nums.length
The elements in nums are distinct.
*/

/*
Approach:
- This problem asks for rearranging the array such that:
    result[i] = nums[nums[i]]
- We are not allowed to use extra space, so we need to do it in-place.

Intuition:
- To avoid using extra space and still keep the original and new values,
  we encode both into one number using the formula:
    nums[i] = a + b*n
  Where:
    - a is the original value (nums[i])
    - b is the new value we want to set (nums[nums[i]])
  - Then decode by dividing by `n`: nums[i] = nums[i] / n

Why it works:
- Since all values in nums are in range [0, n-1], nums[nums[i]] will also be in [0, n-1]
- So multiplying by `n` ensures no overflow/overlap between original and new values.

Time Complexity: O(n) – we traverse the array twice.
Space Complexity: O(1) – in-place transformation without extra array.
*/

class Solution {
public:
    vector<int> buildArray(vector<int>& nums) {
        int n = nums.size();
        
        // Encode both old and new value at each index
        for (int i = 0; i < n; i++) {
            nums[i] = nums[i] + n * (nums[nums[i]] % n); 
        }

        // Decode to get the final transformed value
        for (int i = 0; i < n; i++) {
            nums[i] = nums[i] / n;
        }

        return nums;
    }
};
